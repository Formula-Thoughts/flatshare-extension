AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Flatini backend stack

Globals:
  Function:
    Timeout: 50
    Environment:
      Variables:
        ENVIRONMENT: PROD

Parameters:
  GoogleClientId:
    Description: ClientId
    Type: String
  GoogleClientSecret:
    Description: ClientSecret
    Type: String

Resources:

  FlatiniUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Join
        - "-"
        - - "flatini-user-pool"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  CognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      AttributeMapping:
        email: email
        name: name
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: email profile
      ProviderType: Google
      UserPoolId: !Ref FlatiniUserPool

  FlatiniUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref FlatiniUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://localhost:3000
        - https://flatini.com
        - http://localhost:3000
        - https://oauth.pstmn.io/v1/browser-callback
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - profile
        - openid
      SupportedIdentityProviders:
        - !Ref CognitoUserPoolIdentityProvider
      LogoutURLs:
        - https://localhost:3000
        - https://flatini.com
        - http://localhost:3000

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join
        - "-"
        - - "flatini"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      UserPoolId: !Ref FlatiniUserPool

  FlatiniAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FlatiniAppRoleLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
        - PolicyName: FlatiniAppRoleSqsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: arn:aws:sqs:*:*:*
        - PolicyName: FlatiniAppRoleCognitoPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                Resource: !Sub arn:aws:cognito-idp:*:*:userpool/${FlatiniUserPool.UserPoolId}
        - PolicyName: FlatiniAppRoleDbPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource: !Sub arn:aws:dynamodb:*:*:table/${FlatiniDb}*

  FlatiniHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "https://localhost:3000"
          - "http://localhost:3000"
          - "https://flatini.com"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH
      Auth:
        Authorizers:
          UserAuth:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer:
                !Join
                - ''
                - - 'https://cognito-idp.'
                  - !Sub ${AWS::Region}
                  - '.amazonaws.com/'
                  - !Ref FlatiniUserPool
              audience:
                - !Ref FlatiniUserPoolClient

  FlatiniDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - "flatini-db"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AttributeDefinitions:
        - AttributeName: "partition_key"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "partition_key"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"

  FlatiniFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt MyQueue.QueueName
          DYNAMODB_TABLE: !Ref FlatiniDb
          USER_POOL_ID: !GetAtt FlatiniUserPool.UserPoolId

      MemorySize: 1024
      CodeUri: ./
      Handler: src/app.lambda_handler
      Runtime: python3.10
      Events:
        GetGroupInviteCodeById:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups/{group_id}/code
            Method: get
            ApiId: !Ref FlatiniHttpApi
        GetUserGroups:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups
            Method: get
            ApiId: !Ref FlatiniHttpApi
        GetUserGroupById:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups/{group_id}
            Method: get
            ApiId: !Ref FlatiniHttpApi
        CreateGroup:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups
            Method: post
            ApiId: !Ref FlatiniHttpApi
        UpdateGroup:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups/{group_id}
            Method: put
            ApiId: !Ref FlatiniHttpApi
        AddFlatToGroup:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups/{group_id}/properties
            Method: post
            ApiId: !Ref FlatiniHttpApi
        AddUserToGroup:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /participants
            Method: post
            ApiId: !Ref FlatiniHttpApi
        DeleteFlat:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /groups/{group_id}/properties/{property_id}
            Method: delete
            ApiId: !Ref FlatiniHttpApi
        CreateRedFlag:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /red-flags
            Method: post
            ApiId: !Ref FlatiniHttpApi
        GetRedFlags:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /red-flags
            Method: get
            ApiId: !Ref FlatiniHttpApi
        CreateVoteForRedFlag:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /red-flags/{red_flag_id}/votes
            Method: post
            ApiId: !Ref FlatiniHttpApi
        DeleteVoteForRedFlag:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /red-flags/{red_flag_id}/votes
            Method: delete
            ApiId: !Ref FlatiniHttpApi
      Role: !GetAtt FlatiniAppRole.Arn

  FlatiniApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FlatiniFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/

  # TODO: Currently not used
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt FlatiniFunction.Arn

  # TODO: Currently not used
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join
        - "-"
        - - "flatini-queue"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - ".fifo"
      VisibilityTimeout: 50
      FifoQueue: true

Outputs:
  FlatiniBaseUrl:
    Description: "Base URL for Flatini API"
    Value: !Sub "https://${FlatiniHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  CognitoAppClientID:
    Value: !Ref FlatiniUserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://flatini.auth.${AWS::Region}.amazoncognito.com/login?client_id=${FlatiniUserPoolClient}&response_type=code&scope=email+profile&redirect_uri=https://localhost:3000
    Description: The hosted UI URL