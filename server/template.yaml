AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Flatini backend stack

Parameters:
  LambdaRole:
    Type: String
    Description: The role which the lambda executes

Globals:
  Function:
    Timeout: 50
    Environment:
      Variables:
        ENVIRONMENT: PROD

Resources:

  Database:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "flatini-blob-db"

  FlatiniHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "https://localhost:3000"
          - "http://localhost:3000"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH

  FlatiniApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Role: !Ref LambdaRole
      CodeUri: ./
      Handler: src/api.lambda_handler
      Runtime: python3.9
      Events:
        GetAllGroups:
          Type: HttpApi
          Properties:
            Path: /groups
            Method: get
            ApiId: !Ref FlatiniHttpApi
        CreeateGroup:
          Type: HttpApi
          Properties:
            Path: /groups
            Method: post
            ApiId: !Ref FlatiniHttpApi

  FlatiniBackgroundFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Role: !Ref LambdaRole
      CodeUri: ./
      Handler: src/background_service.lambda_handler
      Runtime: python3.9

  FlatiniBackgroundCron:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Data updater"
      ScheduleExpression: "cron(*/2 * * * *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt FlatiniBackgroundFunction.Arn
          Id: "TargetFunctionV1"

Outputs:
  FlatiniBaseUrl:
    Description: "Base URL for Flatini API"
    Value: !Sub "https://${FlatiniHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"