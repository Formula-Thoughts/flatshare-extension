AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Flatini backend stack

Globals:
  Function:
    Timeout: 50
    Environment:
      Variables:
        ENVIRONMENT: PROD

Resources:

  Database:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "flatini-blob-db"

  FlatiniAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FlatiniAppRoleLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
        - PolicyName: FlatiniAppRoleSqsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: arn:aws:sqs:*:*:*
        - PolicyName: FlatiniAppRoleDbPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub arn:aws:s3:::${Database}*

  FlatiniHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "https://localhost:3000"
          - "http://localhost:3000"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH

  FlatiniFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      CodeUri: ./
      Handler: src/app.lambda_handler
      Runtime: python3.10
      Events:
        GetGroupById:
          Type: HttpApi
          Properties:
            Path: /groups/{group_id}
            Method: get
            ApiId: !Ref FlatiniHttpApi
        CreateGroup:
          Type: HttpApi
          Properties:
            Path: /groups
            Method: post
            ApiId: !Ref FlatiniHttpApi
        CreateFlat:
          Type: HttpApi
          Properties:
            Path: /groups/{group_id}/flats
            Method: post
            ApiId: !Ref FlatiniHttpApi
        DeleteFlat:
          Type: HttpApi
          Properties:
            Path: /groups/{group_id}/flats/{flat_id}
            Method: delete
            ApiId: !Ref FlatiniHttpApi
      Role: !GetAtt FlatiniAppRole.Arn

  FlatiniApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FlatiniFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt FlatiniFunction.Arn

  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "flatini-queue.fifo"
      VisibilityTimeout: 50
      FifoQueue: true

Outputs:
  FlatiniBaseUrl:
    Description: "Base URL for Flatini API"
    Value: !Sub "https://${FlatiniHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"